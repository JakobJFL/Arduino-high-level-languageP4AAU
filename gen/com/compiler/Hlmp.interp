token literal names:
null
','
'Num '
'Bool '
'Pwm '
'Pin '
'!'
'+'
'-'
'/'
'*'
'%'
'<'
'>'
'=='
'!='
'&&'
'||'
null
null
null
null
null
'setup'
'loop'
'func '
'proc '
'.Write'
'.ReadPwm'
'.ReadAnalog'
'.ReadDigital'
'('
')'
'{'
'}'
';'
'='
'~'
'HIGH'
'LOW'
null
'TOGGLE'
null
'true'
'false'
'if'
'else'
'return'
'while'
null
null
null
null
null
null

token symbolic names:
null
null
NUMTYPE
BOOLTYPE
PWMTYPE
PINTYPE
NEG
PLUS
MINUS
DIVIDE
MULT
MODULU
LESSTHAN
GREATERTHAN
EQUAL
NOTEQUAL
LOGAND
LOGOR
RELATIONAL
ARITHMETIC
LOGICAL
SINT
FLOAT
SETUP
LOOP
FUNC
PROC
WRITE
READPWM
READA
READD
LPAREN
RPAREN
LBRACE
RBRACE
END
ASSIGN
NEGATIVE
HIGH
LOW
PINMODE
TOGGLE
BOOL
TRUE
FALSE
IF
ELSE
RETURN
WHILE
PINNUMBER
COMMENT
LINECOMMENT
WS
NEWLINE
ID

rule names:
program
content
funcProc
funcHead
procHead
id
parameters
parameter
type
body
stmt
varDecl
expr
operand
readFunc
pinLiteral
assign
returnExpr
funcCall
args
writeFunc
val
ifStmt
elseStmt
whileExpr
setupDef
loopDef
comment


atn:
